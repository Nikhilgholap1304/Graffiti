{"version":3,"file":"react-responsive-modal.cjs.production.min.js","sources":["../src/CloseIcon.tsx","../src/utils.ts","../src/lib/focusTrapJs.ts","../src/FocusTrap.tsx","../src/modalManager.ts","../src/index.tsx","../src/useScrollLock.ts"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\n\ninterface CloseIconProps {\n  id?: string;\n  closeIcon?: React.ReactNode;\n  styles?: {\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  classNames?: {\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  classes: {\n    closeButton?: string;\n  };\n  onClick: () => void;\n}\n\nconst CloseIcon = ({\n  classes,\n  classNames,\n  styles,\n  id,\n  closeIcon,\n  onClick,\n}: CloseIconProps) => (\n  <button\n    id={id}\n    className={cx(classes.closeButton, classNames?.closeButton)}\n    style={styles?.closeButton}\n    onClick={onClick}\n    data-testid=\"close-button\"\n  >\n    {closeIcon ? (\n      closeIcon\n    ) : (\n      <svg\n        className={classNames?.closeIcon}\n        style={styles?.closeIcon}\n        width={28}\n        height={28}\n        viewBox=\"0 0 36 36\"\n        data-testid=\"close-icon\"\n      >\n        <path d=\"M28.5 9.62L26.38 7.5 18 15.88 9.62 7.5 7.5 9.62 15.88 18 7.5 26.38l2.12 2.12L18 20.12l8.38 8.38 2.12-2.12L20.12 18z\" />\n      </svg>\n    )}\n  </button>\n);\n\nexport default CloseIcon;\n","export const isBrowser = typeof window !== 'undefined';\n","// https://github.com/alexandrzavalii/focus-trap-js/blob/master/src/index.js v1.1.0\n\nexport const candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\n\nfunction isHidden(node: any) {\n  // offsetParent being null will allow detecting cases where an element is invisible or inside an invisible element,\n  // as long as the element does not use position: fixed. For them, their visibility has to be checked directly as well.\n  return (\n    node.offsetParent === null || getComputedStyle(node).visibility === 'hidden'\n  );\n}\n\nfunction getCheckedRadio(nodes: any, form: any) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isNotRadioOrTabbableRadio(node: any) {\n  if (node.tagName !== 'INPUT' || node.type !== 'radio' || !node.name) {\n    return true;\n  }\n  var radioScope = node.form || node.ownerDocument;\n  var radioSet = radioScope.querySelectorAll(\n    'input[type=\"radio\"][name=\"' + node.name + '\"]'\n  );\n  var checked = getCheckedRadio(radioSet, node.form);\n  return checked === node || (checked === undefined && radioSet[0] === node);\n}\n\nexport function getAllTabbingElements(parentElem: any) {\n  var currentActiveElement = document.activeElement;\n  var tabbableNodes = parentElem.querySelectorAll(candidateSelectors.join(','));\n  var onlyTabbable = [];\n  for (var i = 0; i < tabbableNodes.length; i++) {\n    var node = tabbableNodes[i];\n    if (\n      currentActiveElement === node ||\n      (!node.disabled &&\n        getTabindex(node) > -1 &&\n        !isHidden(node) &&\n        isNotRadioOrTabbableRadio(node))\n    ) {\n      onlyTabbable.push(node);\n    }\n  }\n  return onlyTabbable;\n}\n\nexport function tabTrappingKey(event: any, parentElem: any) {\n  // check if current event keyCode is tab\n  if (!event || event.key !== 'Tab') return;\n\n  if (!parentElem || !parentElem.contains) {\n    if (process && process.env.NODE_ENV === 'development') {\n      console.warn('focus-trap-js: parent element is not defined');\n    }\n    return false;\n  }\n\n  if (!parentElem.contains(event.target)) {\n    return false;\n  }\n\n  var allTabbingElements = getAllTabbingElements(parentElem);\n  var firstFocusableElement = allTabbingElements[0];\n  var lastFocusableElement = allTabbingElements[allTabbingElements.length - 1];\n\n  if (event.shiftKey && event.target === firstFocusableElement) {\n    lastFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  } else if (!event.shiftKey && event.target === lastFocusableElement) {\n    firstFocusableElement.focus();\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}\n\nfunction getTabindex(node: any) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n\n  if (!isNaN(tabindexAttr)) return tabindexAttr;\n  // Browsers do not return tabIndex correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction isContentEditable(node: any) {\n  return node.getAttribute('contentEditable');\n}\n","import { useEffect, useRef } from 'react';\nimport { isBrowser } from './utils';\nimport {\n  tabTrappingKey,\n  candidateSelectors,\n  getAllTabbingElements,\n} from './lib/focusTrapJs';\n\ninterface FocusTrapProps {\n  container?: React.RefObject<HTMLElement> | null;\n  initialFocusRef?: React.RefObject<HTMLElement>;\n}\n\nexport const FocusTrap = ({ container, initialFocusRef }: FocusTrapProps) => {\n  const refLastFocus = useRef<HTMLElement | null>();\n  /**\n   * Handle focus lock on the modal\n   */\n  useEffect(() => {\n    const handleKeyEvent = (event: KeyboardEvent) => {\n      if (container?.current) {\n        tabTrappingKey(event, container.current);\n      }\n    };\n\n    if (isBrowser) {\n      document.addEventListener('keydown', handleKeyEvent);\n    }\n    // On mount we focus on the first focusable element in the modal if there is one\n    if (isBrowser && container?.current) {\n      const savePreviousFocus = () => {\n        // First we save the last focused element\n        // only if it's a focusable element\n        if (\n          candidateSelectors.findIndex((selector) =>\n            document.activeElement?.matches(selector)\n          ) !== -1\n        ) {\n          refLastFocus.current = document.activeElement as HTMLElement;\n        }\n      };\n\n      if (initialFocusRef) {\n        savePreviousFocus();\n        // We need to schedule focusing on a next frame - this allows to focus on the modal root\n        requestAnimationFrame(() => {\n          initialFocusRef.current?.focus();\n        });\n      } else {\n        const allTabbingElements = getAllTabbingElements(container.current);\n        if (allTabbingElements[0]) {\n          savePreviousFocus();\n          allTabbingElements[0].focus();\n        }\n      }\n    }\n    return () => {\n      if (isBrowser) {\n        document.removeEventListener('keydown', handleKeyEvent);\n        // On unmount we restore the focus to the last focused element\n        refLastFocus.current?.focus();\n      }\n    };\n  }, [container, initialFocusRef]);\n\n  return null;\n};\n","import { Ref, useEffect } from 'react';\n\nlet modals: Ref<Element>[] = [];\n\n/**\n * Handle the order of the modals.\n * Inspired by the material-ui implementation.\n */\nexport const modalManager = {\n  /**\n   * Register a new modal\n   */\n  add: (newModal: Ref<Element>) => {\n    modals.push(newModal);\n  },\n\n  /**\n   * Remove a modal\n   */\n  remove: (oldModal: Ref<Element>) => {\n    modals = modals.filter((modal) => modal !== oldModal);\n  },\n\n  /**\n   * When multiple modals are rendered will return true if current modal is the last one\n   */\n  isTopModal: (modal: Ref<Element>) =>\n    !!modals.length && modals[modals.length - 1] === modal,\n};\n\nexport function useModalManager(ref: Ref<Element>, open: boolean) {\n  useEffect(() => {\n    if (open) {\n      modalManager.add(ref);\n    }\n    return () => {\n      modalManager.remove(ref);\n    };\n  }, [open, ref]);\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport ReactDom from 'react-dom';\nimport cx from 'classnames';\nimport CloseIcon from './CloseIcon';\nimport { FocusTrap } from './FocusTrap';\nimport { modalManager, useModalManager } from './modalManager';\nimport { useScrollLock } from './useScrollLock';\nimport { isBrowser } from './utils';\nimport useForwardedRef from '@bedrock-layout/use-forwarded-ref';\n\nconst classes = {\n  root: 'react-responsive-modal-root',\n  overlay: 'react-responsive-modal-overlay',\n  overlayAnimationIn: 'react-responsive-modal-overlay-in',\n  overlayAnimationOut: 'react-responsive-modal-overlay-out',\n  modalContainer: 'react-responsive-modal-container',\n  modalContainerCenter: 'react-responsive-modal-containerCenter',\n  modal: 'react-responsive-modal-modal',\n  modalAnimationIn: 'react-responsive-modal-modal-in',\n  modalAnimationOut: 'react-responsive-modal-modal-out',\n  closeButton: 'react-responsive-modal-closeButton',\n};\n\nexport interface ModalProps {\n  /**\n   * Control if the modal is open or not.\n   */\n  open: boolean;\n  /**\n   * Should the dialog be centered.\n   *\n   * Default to false.\n   */\n  center?: boolean;\n  /**\n   * Is the modal closable when user press esc key.\n   *\n   * Default to true.\n   */\n  closeOnEsc?: boolean;\n  /**\n   * Is the modal closable when user click on overlay.\n   *\n   * Default to true.\n   */\n  closeOnOverlayClick?: boolean;\n  /**\n   * Whether to block scrolling when dialog is open.\n   *\n   * Default to true.\n   */\n  blockScroll?: boolean;\n  /**\n   * Show the close icon.\n   *\n   * Default to true.\n   */\n  showCloseIcon?: boolean;\n  /**\n   * id attribute for the close icon button.\n   */\n  closeIconId?: string;\n  /**\n   * Custom icon to render (svg, img, etc...).\n   */\n  closeIcon?: React.ReactNode;\n  /**\n   * When the modal is open, trap focus within it.\n   *\n   * Default to true.\n   */\n  focusTrapped?: boolean;\n  /**\n   * Element to focus when focus trap is used.\n   *\n   * Default to undefined.\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>;\n  /**\n   * You can specify a container prop which should be of type `Element`.\n   * The portal will be rendered inside that element.\n   * The default behavior will create a div node and render it at the at the end of document.body.\n   */\n  container?: Element | null;\n  /**\n   * An object containing classNames to style the modal.\n   */\n  classNames?: {\n    root?: string;\n    overlay?: string;\n    overlayAnimationIn?: string;\n    overlayAnimationOut?: string;\n    modalContainer?: string;\n    modal?: string;\n    modalAnimationIn?: string;\n    modalAnimationOut?: string;\n    closeButton?: string;\n    closeIcon?: string;\n  };\n  /**\n   * An object containing the styles objects to style the modal.\n   */\n  styles?: {\n    root?: React.CSSProperties;\n    overlay?: React.CSSProperties;\n    modalContainer?: React.CSSProperties;\n    modal?: React.CSSProperties;\n    closeButton?: React.CSSProperties;\n    closeIcon?: React.CSSProperties;\n  };\n  /**\n   * Animation duration in milliseconds.\n   *\n   * Default to 300.\n   */\n  animationDuration?: number;\n  /**\n   * ARIA role for modal\n   *\n   * Default to 'dialog'.\n   */\n  role?: string;\n  /**\n   * ARIA label for modal\n   */\n  ariaLabelledby?: string;\n  /**\n   * ARIA description for modal\n   */\n  ariaDescribedby?: string;\n  /**\n   * Avoid unpleasant flickering effect when body overflow is hidden. For more information see https://www.npmjs.com/package/body-scroll-lock\n   */\n  reserveScrollBarGap?: boolean;\n  /**\n   * id attribute for modal container\n   */\n  containerId?: string;\n  /**\n   * id attribute for modal\n   */\n  modalId?: string;\n  /**\n   * Callback fired when the Modal is requested to be closed by a click on the overlay or when user press esc key.\n   */\n  onClose: () => void;\n  /**\n   * Callback fired when the escape key is pressed.\n   */\n  onEscKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?: (\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>\n  ) => void;\n  /**\n   * Callback fired when the Modal has exited and the animation is finished.\n   */\n  onAnimationEnd?: () => void;\n  children?: React.ReactNode;\n}\n\nexport const Modal = React.forwardRef(\n  (\n    {\n      open,\n      center,\n      blockScroll = true,\n      closeOnEsc = true,\n      closeOnOverlayClick = true,\n      container,\n      showCloseIcon = true,\n      closeIconId,\n      closeIcon,\n      focusTrapped = true,\n      initialFocusRef = undefined,\n      animationDuration = 300,\n      classNames,\n      styles,\n      role = 'dialog',\n      ariaDescribedby,\n      ariaLabelledby,\n      containerId,\n      modalId,\n      onClose,\n      onEscKeyDown,\n      onOverlayClick,\n      onAnimationEnd,\n      children,\n      reserveScrollBarGap,\n    }: ModalProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const refDialog = useForwardedRef(ref);\n    const refModal = useRef<HTMLDivElement>(null);\n    const refShouldClose = useRef<boolean | null>(null);\n    const refContainer = useRef<HTMLDivElement | null>(null);\n    // Lazily create the ref instance\n    // https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n    if (refContainer.current === null && isBrowser) {\n      refContainer.current = document.createElement('div');\n    }\n\n    // The value should be false for srr, that way when the component is hydrated client side,\n    // it will match the server rendered content\n    const [showPortal, setShowPortal] = useState(false);\n\n    // Hook used to manage multiple modals opened at the same time\n    useModalManager(refModal, open);\n\n    // Hook used to manage the scroll\n    useScrollLock(refModal, open, showPortal, blockScroll, reserveScrollBarGap);\n\n    const handleOpen = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        !document.body.contains(refContainer.current)\n      ) {\n        document.body.appendChild(refContainer.current);\n      }\n\n      document.addEventListener('keydown', handleKeydown);\n    };\n\n    const handleClose = () => {\n      if (\n        refContainer.current &&\n        !container &&\n        document.body.contains(refContainer.current)\n      ) {\n        document.body.removeChild(refContainer.current);\n      }\n      document.removeEventListener('keydown', handleKeydown);\n    };\n\n    const handleKeydown = (event: KeyboardEvent) => {\n      // Only the last modal need to be escaped when pressing the esc key\n      if (event.keyCode !== 27 || !modalManager.isTopModal(refModal)) {\n        return;\n      }\n\n      onEscKeyDown?.(event);\n\n      if (closeOnEsc) {\n        onClose();\n      }\n    };\n\n    useEffect(() => {\n      return () => {\n        if (showPortal) {\n          // When the modal is closed or removed directly, cleanup the listeners\n          handleClose();\n        }\n      };\n    }, [showPortal]);\n\n    useEffect(() => {\n      // If the open prop is changing, we need to open the modal\n      // This is also called on the first render if the open prop is true when the modal is created\n      if (open && !showPortal) {\n        setShowPortal(true);\n        handleOpen();\n      }\n    }, [open]);\n\n    const handleClickOverlay = (\n      event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n      if (refShouldClose.current === null) {\n        refShouldClose.current = true;\n      }\n\n      if (!refShouldClose.current) {\n        refShouldClose.current = null;\n        return;\n      }\n\n      onOverlayClick?.(event);\n\n      if (closeOnOverlayClick) {\n        onClose();\n      }\n\n      refShouldClose.current = null;\n    };\n\n    const handleModalEvent = () => {\n      refShouldClose.current = false;\n    };\n\n    const handleAnimationEnd = () => {\n      if (!open) {\n        setShowPortal(false);\n      }\n\n      onAnimationEnd?.();\n    };\n\n    const containerModal = container || refContainer.current;\n\n    const overlayAnimation = open\n      ? classNames?.overlayAnimationIn ?? classes.overlayAnimationIn\n      : classNames?.overlayAnimationOut ?? classes.overlayAnimationOut;\n\n    const modalAnimation = open\n      ? classNames?.modalAnimationIn ?? classes.modalAnimationIn\n      : classNames?.modalAnimationOut ?? classes.modalAnimationOut;\n\n    return showPortal && containerModal\n      ? ReactDom.createPortal(\n          <div\n            className={cx(classes.root, classNames?.root)}\n            style={styles?.root}\n            data-testid=\"root\"\n          >\n            <div\n              className={cx(classes.overlay, classNames?.overlay)}\n              data-testid=\"overlay\"\n              aria-hidden={true}\n              style={{\n                animation: `${overlayAnimation} ${animationDuration}ms`,\n                ...styles?.overlay,\n              }}\n            />\n            <div\n              ref={refModal}\n              id={containerId}\n              className={cx(\n                classes.modalContainer,\n                center && classes.modalContainerCenter,\n                classNames?.modalContainer\n              )}\n              style={styles?.modalContainer}\n              data-testid=\"modal-container\"\n              onClick={handleClickOverlay}\n            >\n              <div\n                ref={refDialog}\n                className={cx(classes.modal, classNames?.modal)}\n                style={{\n                  animation: `${modalAnimation} ${animationDuration}ms`,\n                  ...styles?.modal,\n                }}\n                onMouseDown={handleModalEvent}\n                onMouseUp={handleModalEvent}\n                onClick={handleModalEvent}\n                onAnimationEnd={handleAnimationEnd}\n                id={modalId}\n                role={role}\n                aria-modal=\"true\"\n                aria-labelledby={ariaLabelledby}\n                aria-describedby={ariaDescribedby}\n                data-testid=\"modal\"\n                tabIndex={-1}\n              >\n                {focusTrapped && (\n                  <FocusTrap\n                    container={refDialog}\n                    initialFocusRef={initialFocusRef}\n                  />\n                )}\n                {children}\n                {showCloseIcon && (\n                  <CloseIcon\n                    classes={classes}\n                    classNames={classNames}\n                    styles={styles}\n                    closeIcon={closeIcon}\n                    onClick={onClose}\n                    id={closeIconId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>,\n          containerModal\n        )\n      : null;\n  }\n);\n\nexport default Modal;\n","import { useEffect, useRef } from 'react';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\n\nexport const useScrollLock = (\n  refModal: React.RefObject<Element>,\n  open: boolean,\n  showPortal: boolean,\n  blockScroll: boolean,\n  reserveScrollBarGap?: boolean\n) => {\n  const oldRef = useRef<Element | null>(null);\n\n  useEffect(() => {\n    if (open && refModal.current && blockScroll) {\n      oldRef.current = refModal.current;\n      disableBodyScroll(refModal.current, { reserveScrollBarGap });\n    }\n    return () => {\n      if (oldRef.current) {\n        enableBodyScroll(oldRef.current);\n        oldRef.current = null;\n      }\n    };\n  }, [open, showPortal, refModal, blockScroll, reserveScrollBarGap]);\n};\n"],"names":["CloseIcon","classNames","styles","closeIcon","onClick","React","id","className","cx","classes","closeButton","style","width","height","viewBox","d","isBrowser","window","candidateSelectors","isHidden","node","offsetParent","getComputedStyle","visibility","isNotRadioOrTabbableRadio","tagName","type","name","radioSet","form","ownerDocument","querySelectorAll","checked","nodes","i","length","getCheckedRadio","undefined","getAllTabbingElements","parentElem","currentActiveElement","document","activeElement","tabbableNodes","join","onlyTabbable","disabled","getTabindex","push","tabindexAttr","parseInt","getAttribute","isNaN","isContentEditable","tabIndex","FocusTrap","container","initialFocusRef","refLastFocus","useRef","useEffect","handleKeyEvent","event","current","key","contains","process","target","allTabbingElements","firstFocusableElement","lastFocusableElement","shiftKey","focus","preventDefault","tabTrappingKey","addEventListener","savePreviousFocus","findIndex","selector","_document$activeEleme","matches","requestAnimationFrame","removeEventListener","modals","root","overlay","overlayAnimationIn","overlayAnimationOut","modalContainer","modalContainerCenter","modal","modalAnimationIn","modalAnimationOut","Modal","forwardRef","ref","open","center","blockScroll","closeOnEsc","closeOnOverlayClick","showCloseIcon","closeIconId","focusTrapped","animationDuration","role","ariaDescribedby","ariaLabelledby","containerId","modalId","onClose","onEscKeyDown","onOverlayClick","onAnimationEnd","children","reserveScrollBarGap","refDialog","useForwardedRef","refModal","refShouldClose","refContainer","createElement","useState","showPortal","setShowPortal","oldModal","filter","useModalManager","oldRef","disableBodyScroll","enableBodyScroll","useScrollLock","handleKeydown","keyCode","body","removeChild","appendChild","handleModalEvent","containerModal","overlayAnimation","modalAnimation","ReactDom","createPortal","animation","onMouseDown","onMouseUp"],"mappings":"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"}